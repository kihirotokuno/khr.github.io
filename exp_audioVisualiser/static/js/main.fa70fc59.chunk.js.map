{"version":3,"sources":["AudioVisualizer.js","App.js","reportWebVitals.js","index.js"],"names":["extend","OrbitControls","CameraControls","camera","gl","useThree","controlsRef","useRef","useEffect","controls","domElement","enableDamping","dampingFactor","enableZoom","autoRotate","autoRotateSpeed","current","dispose","useFrame","update","AudioVisualizer","isRecording","setIsRecording","useState","audioData","setAudioData","threeDData","setThreeDData","canvasRef","audioContextRef","analyserRef","dataArrayRef","sourceRef","rafIdRef","cancelAnimationFrame","close","drawWaveform","canvas","canvasCtx","getContext","width","height","getByteTimeDomainData","fillStyle","fillRect","lineWidth","strokeStyle","beginPath","sliceWidth","length","x","newAudioData","i","v","y","moveTo","lineTo","push","time","amplitude","stroke","interpolatedWave","map","d","theta","Array","from","_","Math","PI","r","x_prime","cos","y_prime","sin","z_prime","avgX","reduce","sum","val","avgY","avgZ","z","requestAnimationFrame","React","createElement","className","ref","style","visibility","position","top","left","Canvas","fov","near","far","intensity","ThreeDVisualization","points","useMemo","geometry","THREE","positions","Float32Array","flatMap","_ref","setAttribute","lineMaterial","color","Fragment","material","onClick","stopRecording","disconnect","async","stream","navigator","mediaDevices","getUserMedia","audio","window","AudioContext","webkitAudioContext","createAnalyser","createMediaStreamSource","connect","fftSize","bufferLength","frequencyBinCount","Uint8Array","err","console","error","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.fa70fc59.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect, useMemo } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { Canvas, useFrame, extend, useThree } from '@react-three/fiber';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport * as THREE from 'three';\nimport './AudioVisualizer.css';\n\nextend({ OrbitControls });\n\nconst CameraControls = () => {\n  const { camera, gl } = useThree();\n  const controlsRef = useRef();\n\n  useEffect(() => {\n    const controls = new OrbitControls(camera, gl.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.25;\n    controls.enableZoom = true;\n    controls.autoRotate = true;\n    controls.autoRotateSpeed = 0.5;\n    controlsRef.current = controls;\n\n    return () => {\n      controls.dispose();\n    };\n  }, [camera, gl]);\n\n  useFrame(() => {\n    if (controlsRef.current) {\n      controlsRef.current.update();\n    }\n  });\n\n  return null;\n};\n\nconst AudioVisualizer = () => {\n  const [isRecording, setIsRecording] = useState(false);\n  const [audioData, setAudioData] = useState([]);\n  const [threeDData, setThreeDData] = useState([]);\n  const canvasRef = useRef(null);\n  const audioContextRef = useRef(null);\n  const analyserRef = useRef(null);\n  const dataArrayRef = useRef(null);\n  const sourceRef = useRef(null);\n  const rafIdRef = useRef(null);\n\n\n\n  useEffect(() => {\n    return () => {\n      if (rafIdRef.current) {\n        cancelAnimationFrame(rafIdRef.current);\n      }\n      if (audioContextRef.current) {\n        audioContextRef.current.close();\n      }\n    };\n  }, []);\n\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n      analyserRef.current = audioContextRef.current.createAnalyser();\n      sourceRef.current = audioContextRef.current.createMediaStreamSource(stream);\n      sourceRef.current.connect(analyserRef.current);\n\n      analyserRef.current.fftSize = 16384;\n      const bufferLength = analyserRef.current.frequencyBinCount;\n      dataArrayRef.current = new Uint8Array(bufferLength);\n\n      setIsRecording(true);\n      drawWaveform();\n    } catch (err) {\n      console.error('Error accessing microphone:', err);\n    }\n  };\n\n  const stopRecording = () => {\n    if (sourceRef.current) {\n      sourceRef.current.disconnect();\n    }\n    if (audioContextRef.current) {\n      audioContextRef.current.close();\n    }\n    setIsRecording(false);\n    if (rafIdRef.current) {\n      cancelAnimationFrame(rafIdRef.current);\n    }\n  };\n\n  const drawWaveform = () => {\n    if (!canvasRef.current || !analyserRef.current) return;\n\n    const canvas = canvasRef.current;\n    const canvasCtx = canvas.getContext('2d');\n    const width = canvas.width;\n    const height = canvas.height;\n\n    analyserRef.current.getByteTimeDomainData(dataArrayRef.current);\n\n    canvasCtx.fillStyle = 'rgb(200, 200, 200)';\n    canvasCtx.fillRect(0, 0, width, height);\n    canvasCtx.lineWidth = 2;\n    canvasCtx.strokeStyle = 'rgb(0, 0, 0)';\n    canvasCtx.beginPath();\n\n    const sliceWidth = width * 1.0 / dataArrayRef.current.length;\n    let x = 0;\n\n    const newAudioData = [];\n    for (let i = 0; i < dataArrayRef.current.length; i++) {\n      const v = dataArrayRef.current[i] / 128.0;\n      const y = v * height / 2;\n\n      if (i === 0) {\n        canvasCtx.moveTo(x, y);\n      } else {\n        canvasCtx.lineTo(x, y);\n      }\n\n      x += sliceWidth;\n      newAudioData.push({ time: i, amplitude: v });\n    }\n\n    canvasCtx.lineTo(canvas.width, canvas.height / 2);\n    canvasCtx.stroke();\n\n    // Update audio data for the chart\n    setAudioData(newAudioData);\n\n    // Generate 3D data\n    const interpolatedWave = newAudioData.map(d => d.amplitude);\n    const theta = Array.from({ length: interpolatedWave.length }, (_, i) => i / interpolatedWave.length * Math.PI * 2 * 120);\n    const r = interpolatedWave.map(v => v * 1000 - 0.9);\n    const x_prime = r.map((r, i) => r * Math.cos(theta[i]));\n    const y_prime = r.map((r, i) => r * Math.sin(theta[i]));\n    const z_prime = newAudioData.map(d => d.time * 2);\n\n    // 中心に配置するために平均値を計算\n    const avgX = x_prime.reduce((sum, val) => sum + val, 0) / x_prime.length;\n    const avgY = y_prime.reduce((sum, val) => sum + val, 0) / y_prime.length;\n    const avgZ = z_prime.reduce((sum, val) => sum + val, 0) / z_prime.length;\n\n    setThreeDData(x_prime.map((x, i) => ({\n      x: x - avgX,\n      y: y_prime[i] - avgY,\n      z: z_prime[i] - avgZ\n    })));\n\n    rafIdRef.current = requestAnimationFrame(drawWaveform);\n  };\n\n  const ThreeDVisualization = () => {\n    const points = useMemo(() => {\n      const geometry = new THREE.BufferGeometry();\n      const positions = new Float32Array(threeDData.flatMap(({ x, y, z }) => [x, y, z]));\n      geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n      return geometry;\n    }, [threeDData]);\n\n    const lineMaterial = new THREE.LineBasicMaterial({ color: 0x0000ff });\n\n    useFrame(() => {\n      // Add any animations or updates here if needed\n    });\n\n\n\n    return (\n      <>\n        <line geometry={points} material={lineMaterial} />\n        {/* <CameraControls /> */}\n      </>\n    );\n  };\n\n  return (\n    <div className=\"main\">\n      <div className=\"visualization-container\">\n        <canvas ref={canvasRef} width={500} height={200} style={{ width: '100%', height: '1px', visibility: 'hidden', position: 'absolute', top: 0, left: 0 }} />\n\n        <div style={{ width: '100%', height: '100%' }}>\n          <Canvas className=\"three-js-container\" camera={{ position: [5000, 0, 0], fov: 75, near: 0.1, far: 100000 }}>\n            <ambientLight intensity={0.5} />\n            <pointLight position={[10, 10, 10]} intensity={1} />\n            <ThreeDVisualization />\n            <CameraControls />\n          </Canvas>\n        </div>\n      </div>\n\n      <div className=\"top\">\n        <div className=\"div\">音を、</div>\n      </div>\n\n      <div className=\"bottom\">\n        <button className={`button ${isRecording ? 'clicked' : ''}`} onClick={isRecording ? stopRecording : startRecording}>\n          <div className=\"div2\">{isRecording ? 'とめる' : 'きろく'}</div>\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default AudioVisualizer;","import React from 'react';\nimport AudioVisualizer from './AudioVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AudioVisualizer />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}